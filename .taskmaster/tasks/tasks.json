{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Phase 0: Reorganize Code into `src/` Directory and Modules",
        "description": "Restructure the plugin's source code by moving all TypeScript files into a dedicated `src/` directory and splitting the main plugin file into smaller, more manageable modules (e.g., `main.ts`, `settings.ts`, `suggester.ts`).",
        "details": "Create a `src/` directory in the project root. Move `main.ts` and any other source files into it. Update `esbuild.config.js` or equivalent build script to reflect the new entry point (e.g., `entryPoints: ['src/main.ts']`). Create new files like `src/settingsTab.ts` and `src/emojiSuggester.ts` and refactor the relevant classes and logic out of the main file.",
        "testStrategy": "Verify that the plugin compiles successfully after restructuring. Manually test that the plugin loads and all core functionalities (triggering suggester, settings tab) still work in Obsidian.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create `src/` Directory and Move Source Files",
            "description": "Establish the new source code structure by creating a `src/` directory at the project root and relocating all existing TypeScript files (like `main.ts`) into it.",
            "dependencies": [],
            "details": "In the project's root directory, create a new folder named `src`. Move all `.ts` files from the root into this new `src` directory. This is a foundational file system change.\n<info added on 2025-06-28T13:18:35.064Z>\nSuccessfully created src/ directory and moved main.ts to src/main.ts.\n\nWhat worked:\n- mkdir -p src command created the directory without issues\n- mv main.ts src/main.ts successfully relocated the main plugin file\n- Verified main.ts is now in src/ and no longer in root directory\n- Directory structure is clean and ready for next steps\n</info added on 2025-06-28T13:18:35.064Z>",
            "status": "done",
            "testStrategy": "Verify that the files are physically located in the `src/` directory. At this point, running the build script is expected to fail, which confirms the need for the next step."
          },
          {
            "id": 2,
            "title": "Update Build Configuration for New Source Path",
            "description": "Modify the build script (e.g., `esbuild.config.js`) and TypeScript configuration (`tsconfig.json`) to recognize the new location of the source files.",
            "dependencies": [
              1
            ],
            "details": "Open `esbuild.config.js` and update the `entryPoints` array to point to the new path, e.g., `entryPoints: ['src/main.ts']`. Open `tsconfig.json` and ensure the `include` property correctly targets the new directory, e.g., `\"include\": [\"src/**/*.ts\"]`.\n<info added on 2025-06-28T13:20:17.303Z>\nSuccessfully updated build configuration for new src/ directory structure.\nWhat worked:\nUpdated esbuild.config.mjs: entryPoints changed from [\"main.ts\"] to [\"src/main.ts\"].\nUpdated tsconfig.json: include changed from \"**/*.ts\" to \"src/**/*.ts\".\nBuild process tested successfully: npm run build completed with exit code 0.\nmain.js output file generated correctly (516KB, fresh timestamp).\nNo build errors or missing file issues encountered.\nConfiguration changes are working perfectly.\n</info added on 2025-06-28T13:20:17.303Z>",
            "status": "done",
            "testStrategy": "Run the build command (e.g., `npm run build`). The build process should complete successfully, creating the `main.js` plugin file without any 'file not found' errors."
          },
          {
            "id": 3,
            "title": "Extract Settings Logic into `src/settingsTab.ts`",
            "description": "Decouple the settings UI from the main plugin logic. Create a new file for the settings tab and move the corresponding class and interfaces into it.",
            "dependencies": [
              2
            ],
            "details": "Create a new file `src/settingsTab.ts`. Cut the `SampleSettingTab` class (or its equivalent) and any related setting interfaces from `src/main.ts`. Paste this code into `src/settingsTab.ts` and export the class. In `src/main.ts`, add an import statement to bring in the `SampleSettingTab` from `./settingsTab`.\n<info added on 2025-06-28T13:24:32.770Z>\nSuccessfully extracted settings logic into src/settings-tab.ts. The new file was created with the QuickEmojiSettingTab class and related types/interfaces. The filename was updated from settingsTab.ts to settings-tab.ts to adhere to the repository's kebab-case style guide. The import in main.ts was updated to reference './settings-tab' and the duplicate class definition was removed from main.ts. The build completed successfully with no linter errors, confirming the settings functionality is now fully modularized.\n</info added on 2025-06-28T13:24:32.770Z>",
            "status": "done",
            "testStrategy": "After a successful build, load the plugin in the host application. Open the settings and confirm that the plugin's settings tab appears and functions exactly as it did before the refactor."
          },
          {
            "id": 4,
            "title": "Extract Suggester Logic into `src/emojiSuggester.ts`",
            "description": "Isolate the auto-suggestion/completion logic into its own dedicated module to improve code organization and maintainability.",
            "dependencies": [
              3
            ],
            "details": "Create a new file `src/emojiSuggester.ts`. Find the class responsible for suggestions (e.g., `EmojiSuggester`) in `src/main.ts`. Move this class and any helper functions or types it relies on into the new `src/emojiSuggester.ts` file. Export the class. Import the suggester class back into `src/main.ts` where it is instantiated and registered.\n<info added on 2025-06-28T13:27:28.809Z>\nSuccessfully extracted the EmojiSuggester class and its related helper functions (`EMOJI_CATEGORIES` constant, `getActiveEditor`, `getEmojiWithSkin`, and `searchEmojis`) into `src/emoji-suggester.ts`, applying the kebab-case naming convention. The import in `main.ts` was updated to reference the new module, and all duplicate code was removed. The build and linting processes completed successfully, confirming the modular structure is working correctly.\n</info added on 2025-06-28T13:27:28.809Z>",
            "status": "done",
            "testStrategy": "Build the plugin. In the editor, trigger the suggester (e.g., by typing a colon ':'). Verify that the suggestion pop-up appears and provides suggestions correctly."
          },
          {
            "id": 5,
            "title": "Finalize `main.ts` and Verify Plugin Integrity",
            "description": "Clean up the `main.ts` file, which should now act as an orchestrator, and perform a final check to ensure all refactored parts are integrated correctly and the plugin is fully functional.",
            "dependencies": [
              4
            ],
            "details": "Review `src/main.ts`. Its primary role should be handling the plugin lifecycle (`onload`, `onunload`) and initializing the imported modules (settings tab, suggester). Remove any obsolete code, comments, or unused imports. Ensure all imports use relative paths.\n<info added on 2025-06-28T13:29:23.329Z>\nSuccessfully finalized main.ts and verified plugin integrity. The unnecessary console.log was removed from the onunload method as required by Obsidian submission guidelines. The main.ts file is now clean and minimal (2.9KB, 120 lines) with all code properly modularized into three focused files (main, emoji-suggester, settings-tab). The build completed successfully with exit code 0 and no linter errors. The plugin is now ready for submission, adhering to the repository style guide and Obsidian requirements.\n</info added on 2025-06-28T13:29:23.329Z>",
            "status": "done",
            "testStrategy": "Perform a full regression test. Build the plugin one last time. Test all features: loading/unloading the plugin, opening and changing settings, and using the suggester. Check the developer console for any errors."
          }
        ]
      },
      {
        "id": 2,
        "title": "Phase 0: Naming Compliance - Rename Plugin to 'Quick Emoji'",
        "description": "Update the plugin's manifest.json and any user-facing headers to remove the word 'Obsidian' from the name, complying with community plugin guidelines. The new name should be 'Quick Emoji'.",
        "details": "In `manifest.json`, change the `name` field from 'Obsidian Quick Emoji' to 'Quick Emoji'. Search the codebase for any UI elements, like settings tab headers, that use the old name and update them. This is a critical step for plugin submission.",
        "testStrategy": "Check the `manifest.json` file for the correct name. Load the plugin in Obsidian and verify that the name displayed in the community plugins list and any relevant UI components is 'Quick Emoji'.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Phase 0: Update Manifest Description",
        "description": "Update the `description` field in `manifest.json` to remove references to 'Obsidian' and ensure it follows the official plugin description guidelines for brevity and clarity.",
        "details": "Edit the `description` in `manifest.json`. A good example would be changing 'A quick emoji inserter for Obsidian' to 'Quickly search and insert emojis in your editor'.",
        "testStrategy": "Review the `manifest.json` file. Load the plugin in Obsidian and check the description in the community plugins browser to ensure it's updated and concise.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Phase 0: Update Copyright Information",
        "description": "Update the copyright notice in the license file and any relevant source file headers from 'Dynalist Inc.' to the current author's name and the current year.",
        "details": "Locate the `LICENSE` file and any file headers containing a copyright notice. Replace 'Copyright (C) 2020-2025 by Dynalist Inc.' with 'Copyright (C) [Current Year] by [Author's Name]'.",
        "testStrategy": "Perform a global search for 'Dynalist' in the project to find all instances. Manually inspect the `LICENSE` file and source code headers to confirm the update.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Phase 0: Clean Up Console Logging",
        "description": "Remove all development-related `console.log` statements or wrap them in a conditional check to ensure they do not run in production builds, as required for plugin submission.",
        "details": "Search the entire codebase for `console.log`. Remove any unnecessary logs. For logs that are useful for debugging, wrap them in a check. Example: `if (process.env.NODE_ENV === 'development') { console.log('Debug info'); }`. Update the build script to set `NODE_ENV`.",
        "testStrategy": "Run the production build of the plugin. Load it in Obsidian and open the developer console. Perform various actions within the plugin and verify that no custom log messages appear.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Build Script to Define NODE_ENV and Enable Dead Code Elimination",
            "description": "Update the build configuration (e.g., esbuild.config.mjs) to define the `process.env.NODE_ENV` variable. This will allow for conditional code blocks that are stripped from production builds. Ensure minification is enabled for production builds to perform the necessary dead code elimination.",
            "dependencies": [],
            "details": "In the project's build script, add a `define` option to set `process.env.NODE_ENV`. For an esbuild setup, this would look like `define: { 'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development') }`. Verify that `minify: true` is set for production builds, as this is what removes the unused conditional blocks.\n<info added on 2025-06-28T14:02:33.403Z>\nSuccessfully added NODE_ENV definition to esbuild.config.mjs:\n\ndefine: {\n    'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development'),\n},\n\nThis will:\n- Set NODE_ENV to 'development' in watch mode (`npm run dev`)\n- Set NODE_ENV to 'production' in build mode (`npm run build`)\n- Enable dead code elimination in production due to existing `minify: prod` option\n- Allow conditional blocks like `if (process.env.NODE_ENV === 'development')` to be stripped from production builds\n\nNext: Test the configuration to verify it works correctly.\n</info added on 2025-06-28T14:02:33.403Z>\n<info added on 2025-06-28T14:06:39.079Z>\nSuccessfully tested NODE_ENV configuration.\nTest Results:\n- Added a temporary console.log wrapped in an `if (process.env.NODE_ENV === 'development')` conditional.\n- The production build (`npm run build`) correctly stripped out the test console.log.\n- The development build (`npm run dev`) included the test console.log in main.js at line 3053.\n- The temporary test code has been removed.\n\nConfiguration verified:\n- NODE_ENV is set to 'production' in production builds, enabling dead code elimination.\n- NODE_ENV is set to 'development' in development builds, preserving debug code.\n- The build system correctly strips development-only conditionals from the production bundle.\n\nReady to proceed with refactoring actual console statements using this mechanism.\n</info added on 2025-06-28T14:06:39.079Z>",
            "status": "done",
            "testStrategy": "Create a temporary `console.log` wrapped in an `if (process.env.NODE_ENV === 'development')` block. Run a production build and inspect the output bundle (e.g., `main.js`) to confirm the `console.log` statement has been removed. Run a development build and confirm it is still present."
          },
          {
            "id": 2,
            "title": "Refactor `console.log` Statements for Development-Only Output",
            "description": "Perform a codebase-wide search for all instances of `console.log`. Analyze each one to determine its purpose. Remove any logs that are no longer needed. For logs that are valuable for ongoing development or debugging, wrap them in a conditional check: `if (process.env.NODE_ENV === 'development') { ... }`.",
            "dependencies": [],
            "details": "Use the IDE's global search feature to find all occurrences of `console.log(`. For each result, evaluate its context. If it's obsolete or was for temporary debugging, delete the line. If it provides useful debugging information (e.g., object states, API responses), enclose it in the development-only conditional block.\n<info added on 2025-06-28T14:08:03.701Z>\nA comprehensive search for `console.log` statements was performed across the source code. The search confirmed that no `console.log` statements exist in any of the TypeScript source files (`src/*.ts`). The only instances found are within the `commit.ts` build utility script, which is not included in the shipped plugin. Therefore, no refactoring was necessary. The NODE_ENV infrastructure established in the previous step is available for future use.\n</info added on 2025-06-28T14:08:03.701Z>",
            "status": "done",
            "testStrategy": "After refactoring, run the plugin in development mode. Trigger actions that previously logged to the console and verify that the debug messages still appear. Load the production version of the plugin and verify that no `console.log` messages appear during normal operation."
          },
          {
            "id": 3,
            "title": "Analyze and Refactor `console.error` to Use Conditionals or User-Facing Notices",
            "description": "Systematically review every `console.error` call as highlighted in the review feedback. For each instance, decide the appropriate action: remove if irrelevant, wrap in a development conditional if for debugging, or replace with a user-facing `new Notice('...')` if it represents an error the user should be aware of.",
            "dependencies": [],
            "details": "Search for all `console.error` instances. For errors that indicate a non-fatal plugin issue that the user can act on or should know about (e.g., failed to parse a file, API limit reached), replace the log with `new Notice('A user-friendly error message.');`. For errors that are only useful for debugging internal state, wrap them in the `if (process.env.NODE_ENV === 'development')` block. Remove any that are no longer relevant.\n<info added on 2025-06-28T14:01:21.188Z>\nIdentified all console.error statements in the codebase:\n\nIn `src/emoji-suggester.ts`:\nLine 60: `console.error('SearchIndex not initialized')` - Error handling for uninitialized search\nLine 66: `console.error('Failed to search emojis:', error)` - Search failure handling\nLine 149: `console.error(error)` - Generic error in getSuggestions\nLine 158: `console.error('Quick Emoji: Error searching emojis:', error)` - Search error in getSuggestions\n\nIn `src/main.ts`:\nLine 26: `console.error('Failed to initialize emoji-mart data:', error)` - Critical initialization failure with Notice\nLine 60: `console.error('Failed to load recent emojis from localStorage', e)` - localStorage read failure\nLine 84: `console.error('Failed to save recent emojis to localStorage', e)` - localStorage write failure\nLine 93: `console.error('Failed to clear recent emojis from localStorage', e)` - localStorage clear failure\nLine 115: `console.error('Failed to save cleaned recent emojis', e)` - localStorage cleanup failure\n\nAnalysis complete, ready to refactor each based on user impact vs debugging needs.\n</info added on 2025-06-28T14:01:21.188Z>\n<info added on 2025-06-28T14:28:47.481Z>\nRefactoring of all console.error statements is complete.\n\nIn `src/main.ts`, the following were wrapped in development conditionals:\n- Line 26: Failed to initialize emoji-mart data (debugging info, Notice already shown to user)\n- Line 60: Failed to load recent emojis from localStorage (non-critical, debugging only)\n- Line 84: Failed to save recent emojis to localStorage (non-critical, debugging only)\n- Line 93: Failed to clear recent emojis from localStorage (non-critical, debugging only)\n- Line 115: Failed to save cleaned recent emojis (non-critical, debugging only)\n\nIn `src/emoji-suggester.ts`, the following were wrapped in development conditionals:\n- Line 60: SearchIndex not initialized (has fallback logic, debugging only)\n- Line 66: Failed to search emojis (has fallback logic, debugging only)\n- Line 149: Generic error in category search (has fallback logic, debugging only)\n- Line 158: Main error in getSuggestions (has fallback logic, debugging only)\n\nVerification:\n- Production build: No console.error statements found in main.js.\n- All errors properly wrapped in `if (process.env.NODE_ENV === 'development')` blocks.\n- Build system strips development conditionals from the production bundle.\n- User-facing errors still show appropriate Notice messages.\n</info added on 2025-06-28T14:28:47.481Z>",
            "status": "done",
            "testStrategy": "For errors converted to a `Notice`, manually trigger the error condition and verify that the notice toast appears correctly in the Obsidian UI. For errors wrapped in a dev conditional, verify they appear in the console in development mode but are absent in production builds."
          }
        ]
      },
      {
        "id": 6,
        "title": "Phase 0: Remove Top-Level Heading from Settings UI",
        "description": "Refactor the settings tab UI to remove the manually created top-level `h2` heading, as per Obsidian's UI guidelines.",
        "details": "In the settings tab class (e.g., `src/settingsTab.ts`), find and remove the line `containerEl.createEl('h2', { text: 'Quick Emoji Settings' });`. The plugin settings title is automatically handled by Obsidian.",
        "testStrategy": "Open the settings tab for the plugin in Obsidian. Verify that the redundant 'Quick Emoji Settings' H2 heading is gone and only the Obsidian-provided title remains.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Phase 0: Use Sentence Case in Settings UI",
        "description": "Update the settings tab to use sentence case for all user-facing text elements, such as labels and descriptions.",
        "details": "Review all `setName()` and `setDesc()` calls in the settings tab implementation. Change strings like 'Recent Emojis' to 'Recent emojis', 'Clear Recent Emojis' to 'Clear recent emojis', and skin tone names like 'Medium-Light' to 'Medium-light'.",
        "testStrategy": "Open the plugin's settings tab and visually inspect all text. Confirm that all labels, descriptions, and dropdown options use sentence case.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Phase 0: Use `setHeading()` API for Settings Sections",
        "description": "Replace manually created HTML headings in the settings tab with the official `new Setting(containerEl).setHeading()` API for creating section dividers.",
        "details": "Search for any `containerEl.createEl('h3', ...)` or similar manual heading creations within the settings tab. Replace them with `new Setting(containerEl).setHeading().setName('Section name');` to create properly styled and accessible section headings.",
        "testStrategy": "Open the settings tab and verify that sections are divided by headings that match the standard Obsidian settings UI style, not custom HTML elements.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Phase 0: Update README and Documentation",
        "description": "Update the `README.md` file and any other documentation to reflect the new plugin name ('Quick Emoji') and remove any other non-compliant branding.",
        "details": "Edit `README.md` to change the main title and any references from 'Obsidian Quick Emoji' to 'Quick Emoji'. Ensure all screenshots and descriptions are up-to-date with the latest UI changes.",
        "testStrategy": "Review the rendered `README.md` on a platform like GitHub. Ensure all text and images accurately reflect the compliant state of the plugin.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Phase 1: Establish Testing Infrastructure",
        "description": "Set up a testing framework like Vitest or Jest to enable unit and integration testing. Create initial test files for core utility functions and settings management.",
        "details": "Install Vitest (`npm install -D vitest`). Create a `vitest.config.ts` file. Create a `tests/` directory. Write an initial test file, e.g., `tests/utils.test.ts`, to test a simple utility function. Configure npm scripts in `package.json` to run tests (e.g., `\"test\": \"vitest\"`).",
        "testStrategy": "Run `npm test` from the command line and verify that the test suite executes and the initial tests pass. Integrate this into a CI pipeline if possible.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Phase 1: Lazy-Load Emoji Search Index",
        "description": "Optimize the initialization of the `emoji-mart` SearchIndex to improve plugin load time and reduce initial memory usage.",
        "details": "Currently, `emoji-mart` data might be loaded synchronously on plugin start. Refactor this to be asynchronous and lazy-loaded. The `SearchIndex` should only be initialized when the user first triggers the emoji suggester, not when the plugin itself loads. Cache the initialized index for subsequent uses within the session. `let searchIndex: SearchIndex | null = null; async function getSearchIndex() { if (!searchIndex) { /* initialize here */ } return searchIndex; }`",
        "testStrategy": "Use Obsidian's developer tools to measure plugin load time before and after the change. Verify that the emoji suggester still works correctly on its first invocation.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Phase 1: Optimize Real-time Emoji Search Performance",
        "description": "Analyze and optimize the emoji search performance, especially for users typing quickly. This could involve debouncing input or refining the search logic.",
        "details": "Wrap the search execution in the `getSuggestions` method of the `EditorSuggest` with a debounce function (e.g., from `lodash.debounce` or a simple `setTimeout` implementation) with a delay of ~100-150ms. This prevents search execution on every single keystroke, improving perceived performance.",
        "testStrategy": "Manually test by typing search queries quickly in the editor. The UI should remain responsive and not lag. Add logging to a debounced function to ensure it's not firing excessively.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Phase 1: Implement Comprehensive Resource Cleanup on Unload",
        "description": "Implement robust resource cleanup in the `onunload` method to ensure all event listeners, intervals, and other resources are properly removed when the plugin is disabled or updated.",
        "details": "Review the `onunload` method in `main.ts`. Ensure that for every `this.register...` call in `onload`, there is a corresponding cleanup. Explicitly nullify large objects like the emoji index to free up memory. `onunload() { console.log('unloading plugin'); this.app.workspace.off(...); }`",
        "testStrategy": "Enable, use, and then disable the plugin multiple times. Use developer tools to check for detached event listeners or memory leaks. Verify no errors appear in the console upon unload.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Phase 1: Enhance Error Handling and User Feedback",
        "description": "Improve error handling by wrapping critical operations, such as loading data or interacting with the Obsidian API, in try-catch blocks and providing user-facing feedback via `new Notice()`.",
        "details": "Identify critical code paths, such as `loadData()` and `saveData()`. Wrap them in `try-catch` blocks. In the `catch` block, log the full error to the console and show a user-friendly message using `new Notice('Failed to load emoji history. See console for details.')`.",
        "testStrategy": "Manually corrupt the `data.json` file to simulate a loading error and verify that a notice appears. Write unit tests that mock API failures and assert that the error handling logic is triggered.",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Phase 2: Improve Suggester Visual Design and Theme Integration",
        "description": "Improve the visual design and user interaction of the emoji suggester popup, potentially adding subtle animations and better alignment with Obsidian themes.",
        "details": "Add CSS transitions for the suggester's appearance and for hover effects on list items. Use Obsidian's CSS variables (e.g., `--interactive-accent`, `--background-secondary`) in the plugin's `styles.css` to ensure the UI adapts to user themes. For example: `.suggestion-item.is-selected { background-color: var(--interactive-accent); }`",
        "testStrategy": "Test the plugin with several popular light and dark themes (e.g., default, Minimal, Things) to ensure the suggester UI is legible and aesthetically pleasing. Verify animations are smooth and not distracting.",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Phase 2: Optimize Mobile Experience and Touch Interactions",
        "description": "Enhance the mobile experience by improving touch interactions, ensuring tap targets are sufficiently large, and optimizing the layout for smaller screens.",
        "details": "In `styles.css`, use media queries (`@media (max-width: 768px)`) to apply mobile-specific styles. Increase the `padding` and `min-height` of suggestion items to make them easier to tap. Test scrolling behavior on touch devices.",
        "testStrategy": "Test thoroughly on iOS and Android devices using the Obsidian mobile app. Verify that selecting emojis via touch is easy and reliable, and that the suggester does not obstruct the view of the text being edited.",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Phase 2: Implement Customizable Keyboard Trigger",
        "description": "Allow users to customize the trigger character for the emoji suggester, instead of being hardcoded to ':'.",
        "details": "Add a new `TextComponent` setting in the settings tab: `new Setting(containerEl).setName('Trigger character').addText(text => text.setValue(this.plugin.settings.trigger).onChange(async val => { this.plugin.settings.trigger = val; await this.plugin.saveSettings(); }));`. Update the `EditorSuggest` registration to use this setting value as the trigger.",
        "testStrategy": "Change the trigger character in settings (e.g., to '#'). Verify that typing '#' now opens the emoji suggester and ':' no longer does. Test with various symbols.",
        "priority": "low",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Phase 3: Implement Emoji Favorites System",
        "description": "Implement a system for users to mark emojis as 'favorites' for even quicker access. Favorites should appear at the top of the suggestion list, above recent emojis.",
        "details": "Extend the settings data structure to include a `favorites: string[]` array. In the suggester UI, add a 'favorite' icon (e.g., a star) to each emoji. Clicking it adds/removes the emoji's shortcode from the `favorites` array in settings. Modify the `getSuggestions` logic to prepend favorited emojis to the results.",
        "testStrategy": "Favorite several emojis. Close and reopen Obsidian to ensure favorites persist. Trigger the suggester and verify that favorited emojis appear at the very top of the list.",
        "priority": "medium",
        "dependencies": [
          13,
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Phase 3: Add Support for Emoji Aliases",
        "description": "Allow users to create custom categories or aliases for emojis, enabling personalized organization and search.",
        "details": "This is a complex feature. Start with aliases. Add a new settings object `aliases: { [alias: string]: string }` where the key is the custom alias and the value is the native emoji shortcode. In the search logic, augment the search data with these aliases. For example, if a user aliases ':thumbsup:' as ':done:', searching for 'done' should return the thumbs-up emoji.",
        "testStrategy": "Create a new alias in settings, for example, mapping ':work:' to 'U+1F4BB' (laptop emoji). Save settings. In the editor, type the trigger and 'work' and verify the laptop emoji appears as a suggestion.",
        "priority": "low",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Phase 4: Implement Custom Emoji Support (Image Uploads)",
        "description": "Enable users to upload their own images (PNGs/GIFs) to use as custom emojis within the Obsidian editor, storing them within the vault.",
        "details": "Create a setting for the user to specify a folder in their vault for custom emojis (e.g., `.obsidian/plugins/quick-emoji/custom`). Add a UI in settings to manage these images. The suggester will need to be updated to search this folder and render image previews. Insertion would involve embedding the image using the Obsidian format `![[path/to/image.png]]`.",
        "testStrategy": "Configure a custom emoji folder. Add a PNG file to it. Trigger the suggester and search for the filename. Verify the image appears as a suggestion and that selecting it inserts the correct markdown embed link into the editor.",
        "priority": "low",
        "dependencies": [
          1,
          13
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-28T13:14:28.762Z",
      "updated": "2025-06-28T14:33:43.984Z",
      "description": "Tasks for master context"
    }
  }
}